package com.mappy.fpm.batches.tomtom.dbf.speedprofiles;

import com.mappy.fpm.batches.tomtom.TomtomFolder;
import org.junit.Test;

import static com.google.common.collect.ImmutableMap.of;
import static com.mappy.fpm.utils.MemoryFeature.onlyTags;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class SpeedProfilesTest {

    @Test
    public void should_avoid_null_if_speed_restrictions_are_not_found() {
        TomtomFolder folder = mock(TomtomFolder.class);
        when(folder.getFile("hspr.dbf")).thenReturn(getClass().getResource("/tomtom/hspr.dbf").getPath());
        when(folder.getFile("hsnp.dbf")).thenReturn(getClass().getResource("/tomtom/hsnp.dbf").getPath());
        SpeedProfiles profiles = new SpeedProfiles(new HsnpDbf(folder), new HsprDbf(folder));

        assertThat(profiles.getTags(onlyTags(of("ID", "12500000000046"))))
                .containsEntry("mappy_sp_positive_weekday", "27")
                .containsEntry("mappy_sp_positive_weekend", "27")
                .containsEntry("mappy_sp_positive_freeflow", "28")
                .containsEntry("mappy_sp_positive_week", "27")
                .containsEntry("mappy_sp_positive_min_speed_pct_freeflow", "72.8")
                .containsEntry(
                        "mappy_sp_positive_profile1",
                        "106:0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_2_2_2_2_2_3_3_3_4_4_4_5_5_6_6_7_7_8_8_9_9_10_10_11_11_12_12_13_13_14_14_14_15_15_16_16_17_17_17_18_18_19_19_19_20_20_20_21_21_21_22_22_22_23_23_23_24_24_24_25_25_25_25_26_26_26_26_26_27_27_27_27_27_27_27_27_27_27_27_27_27_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_25_25_25_25_25_25_25_24_24_24_24_24_24_23_23_23_23_22_22_22_21_21_21_20_20_19_19_19_18_18_17_17_17_16_16_15_15_15_14_14_14_14_13_13_13_12_12_12_11_11_11_10_10_10_10_10_9_9_9_9_8_8_8_8_7_7_7_6_6_5_5_4_4_3_2_2_1_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0")
                .containsEntry(
                        "mappy_sp_positive_profile2",
                        "35:0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_2_2_2_2_2_3_3_3_4_4_4_4_5_5_5_5_5_5_6_6_6_6_6_6_6_6_6_5_5_5_5_5_5_5_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_3_3_3_3_3_3_3_3_3_3_4_4_4_4_4_4_4_4_4_4_4_5_5_5_5_5_5_5_5_5_5_6_6_6_6_7_7_7_7_8_8_9_9_10_11_11_12_13_14_15_15_16_17_18_19_20_20_21_21_22_22_23_23_23_23_23_23_23_23_22_22_21_20_19_18_17_16_15_14_13_12_11_10_10_9_8_7_7_6_6_5_4_4_4_3_3_2_2_2_1_1_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0")
                .containsEntry(
                        "mappy_sp_positive_profile3",
                        "35:0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_2_2_2_2_2_3_3_3_4_4_4_4_5_5_5_5_5_5_6_6_6_6_6_6_6_6_6_5_5_5_5_5_5_5_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_3_3_3_3_3_3_3_3_3_3_4_4_4_4_4_4_4_4_4_4_4_5_5_5_5_5_5_5_5_5_5_6_6_6_6_7_7_7_7_8_8_9_9_10_11_11_12_13_14_15_15_16_17_18_19_20_20_21_21_22_22_23_23_23_23_23_23_23_23_22_22_21_20_19_18_17_16_15_14_13_12_11_10_10_9_8_7_7_6_6_5_4_4_4_3_3_2_2_2_1_1_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0")
                .containsEntry(
                        "mappy_sp_positive_profile4",
                        "35:0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_2_2_2_2_2_3_3_3_4_4_4_4_5_5_5_5_5_5_6_6_6_6_6_6_6_6_6_5_5_5_5_5_5_5_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_3_3_3_3_3_3_3_3_3_3_4_4_4_4_4_4_4_4_4_4_4_5_5_5_5_5_5_5_5_5_5_6_6_6_6_7_7_7_7_8_8_9_9_10_11_11_12_13_14_15_15_16_17_18_19_20_20_21_21_22_22_23_23_23_23_23_23_23_23_22_22_21_20_19_18_17_16_15_14_13_12_11_10_10_9_8_7_7_6_6_5_4_4_4_3_3_2_2_2_1_1_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0")
                .containsEntry(
                        "mappy_sp_positive_profile5",
                        "35:0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_2_2_2_2_2_3_3_3_4_4_4_4_5_5_5_5_5_5_6_6_6_6_6_6_6_6_6_5_5_5_5_5_5_5_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_3_3_3_3_3_3_3_3_3_3_4_4_4_4_4_4_4_4_4_4_4_5_5_5_5_5_5_5_5_5_5_6_6_6_6_7_7_7_7_8_8_9_9_10_11_11_12_13_14_15_15_16_17_18_19_20_20_21_21_22_22_23_23_23_23_23_23_23_23_22_22_21_20_19_18_17_16_15_14_13_12_11_10_10_9_8_7_7_6_6_5_4_4_4_3_3_2_2_2_1_1_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0")
                .containsEntry(
                        "mappy_sp_positive_profile6",
                        "35:0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_2_2_2_2_2_3_3_3_4_4_4_4_5_5_5_5_5_5_6_6_6_6_6_6_6_6_6_5_5_5_5_5_5_5_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_4_3_3_3_3_3_3_3_3_3_3_4_4_4_4_4_4_4_4_4_4_4_5_5_5_5_5_5_5_5_5_5_6_6_6_6_7_7_7_7_8_8_9_9_10_11_11_12_13_14_15_15_16_17_18_19_20_20_21_21_22_22_23_23_23_23_23_23_23_23_22_22_21_20_19_18_17_16_15_14_13_12_11_10_10_9_8_7_7_6_6_5_4_4_4_3_3_2_2_2_1_1_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0")
                .containsEntry(
                        "mappy_sp_positive_profile7",
                        "106:0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_1_2_2_2_2_2_3_3_3_4_4_4_5_5_6_6_7_7_8_8_9_9_10_10_11_11_12_12_13_13_14_14_14_15_15_16_16_17_17_17_18_18_19_19_19_20_20_20_21_21_21_22_22_22_23_23_23_24_24_24_25_25_25_25_26_26_26_26_26_27_27_27_27_27_27_27_27_27_27_27_27_27_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_26_25_25_25_25_25_25_25_24_24_24_24_24_24_23_23_23_23_22_22_22_21_21_21_20_20_19_19_19_18_18_17_17_17_16_16_15_15_15_14_14_14_14_13_13_13_12_12_12_11_11_11_10_10_10_10_10_9_9_9_9_8_8_8_8_7_7_7_6_6_5_5_4_4_3_2_2_1_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0");

        assertThat(profiles.getTags(onlyTags(of("ID", "12500000000071"))))
                .containsEntry("mappy_sp_positive_freeflow", "46")
                .containsEntry("mappy_sp_negative_freeflow", "46");
    }
}
